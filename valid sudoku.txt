class Solution {
public:
    bool isValidSudoku(vector<vector<char>>& board) {
        unordered_map<char ,int> hash;
        //rows
        for(int i=0;i<9;i++){
            hash.clear();
            for(int j=0;j<9;j++){
                if(board[i][j] != '.'){
                    if(hash.find(board[i][j])!=hash.end()){
                        return false;
                    }
                    else{
                        hash.insert({board[i][j],1});
                    }
                }
            }
        }
        //columns
        for(int i=0;i<9;i++){
            hash.clear();
            for(int j=0;j<9;j++){
                if(board[j][i] != '.'){
                    if(hash.find(board[j][i])!=hash.end()){
                        return false;
                    }
                    else{
                        hash.insert({board[j][i],1});
                    }
                }
            }
        }
        //blocks
        for(int i=0;i<9;i+=3){
            for(int j=0;j<9;j+=3){
                hash.clear();
                for(int k=i;k<i+3;k++){
                    for(int l=j;l<j+3;l++){
                        if(board[k][l] != '.'){
                            if(hash.find(board[k][l])!=hash.end()){
                                return false;
                            }
                            else{
                                hash.insert({board[k][l],1});
                            }
                        }
                    }
                }
            }
        }
        return true;
    }
};